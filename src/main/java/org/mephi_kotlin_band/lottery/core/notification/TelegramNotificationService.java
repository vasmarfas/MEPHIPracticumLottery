package org.mephi_kotlin_band.lottery.core.notification;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.mephi_kotlin_band.lottery.features.lottery.model.Draw;
import org.mephi_kotlin_band.lottery.features.lottery.model.DrawResult;
import org.mephi_kotlin_band.lottery.features.lottery.model.Ticket;
import org.mephi_kotlin_band.lottery.features.user.model.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class TelegramNotificationService implements NotificationService {

    private final RestTemplate restTemplate;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.admin.chatId}")
    private String adminChatId;

    private String getTelegramApiUrl() {
        return "https://api.telegram.org/bot" + botToken + "/sendMessage";
    }

    @Override
    public void notifyWinner(User user, Ticket ticket, DrawResult result) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å telegramChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ —á–∞—Å—Ç—å User –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        String userChatId = getUserTelegramChatId(user);
        
        if (userChatId == null || userChatId.isEmpty()) {
            log.warn("Cannot send Telegram winner notification: user {} has no Telegram chat ID", user.getId());
            return;
        }

        String message = String.format(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n" +
                "–í–∞—à –±–∏–ª–µ—Ç ‚Ññ%s –≤—ã–∏–≥—Ä–∞–ª –≤ —Ç–∏—Ä–∞–∂–µ –ª–æ—Ç–µ—Ä–µ–∏.\n" +
                "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: %s\n",
                ticket.getId(),
                result.getWinningCombination()
        );

        sendTelegramMessage(userChatId, message);
    }

    @Override
    public void notifyDrawResults(Draw draw, DrawResult result) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        String message = String.format(
                "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∏—Ä–∞–∂–∞ –ª–æ—Ç–µ—Ä–µ–∏\n\n" +
                "–¢–∏—Ä–∞–∂ ‚Ññ%s\n" +
                "–¢–∏–ø –ª–æ—Ç–µ—Ä–µ–∏: %s\n" +
                "–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: %s\n",
                draw.getId(),
                draw.getLotteryType(),
                result.getWinningCombination()
        );

        sendTelegramMessage(adminChatId, message);
    }

    @Override
    public void notifyAdminsAboutError(String errorMessage, Exception exception) {
        String message = String.format(
                "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê\n\n" +
                "–°–æ–æ–±—â–µ–Ω–∏–µ: %s\n\n" +
                "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: %s",
                errorMessage,
                exception != null ? exception.getMessage() : "–î–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        );

        sendTelegramMessage(adminChatId, message);
    }

    private void sendTelegramMessage(String chatId, String text) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, Object> body = new HashMap<>();
            body.put("chat_id", chatId);
            body.put("text", text);
            body.put("parse_mode", "HTML");

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(getTelegramApiUrl(), request, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Telegram notification sent to chat ID {}", chatId);
            } else {
                log.error("Failed to send Telegram notification: {}", response.getBody());
            }
        } catch (Exception e) {
            log.error("Error sending Telegram notification", e);
        }
    }

    // –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å telegramChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private String getUserTelegramChatId(User user) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –º–æ–¥–µ–ª–∏ User –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        return null;
    }
} 